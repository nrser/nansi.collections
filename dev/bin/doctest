#!/usr/bin/env python
# pylint: disable=bare-except

import sys
from glob import glob as _glob
from pathlib import Path
import re
from subprocess import run
import os
from argparse import ArgumentParser

from rich.console import Console
from rich.panel import Panel
from rich.padding import Padding
from rich.table import Table


import splatlog as logging


C = Console()
LOG = logging.getLogger("nansi.__doctest__")
REPO_ROOT = Path(__file__).resolve().parents[2]
NANSI_ROOT = REPO_ROOT / "packages" / "nansi"


def glob(path):
    return _glob(str(path), recursive=True)


def rel(path):
    try:
        return f"./{Path(path).relative_to(Path.cwd())}"
    except:
        return str(path)


def ul(itr):
    table = Table.grid(padding=(0, 2))
    table.add_column()
    table.add_column()

    for entry in itr:
        table.add_row(f"-", f"[underline blue]{entry}[/]")

    return table


def ol(itr):
    table = Table.grid(padding=(0, 2))
    table.add_column()
    table.add_column()

    for index, entry in enumerate(itr):
        table.add_row(f"{index + 1}.", f"[underline blue]{entry}[/]")

    return table


@LOG.inject
def is_doctest(path, *, log=LOG):
    # log.debug("Checking if doctest...", path=rel(path))
    with open(path, "r") as f:
        for line in f:
            # if re.match(r'\s*\>\>\>', line):
            if re.match(r"\s*doctest(?:ing)?\.testmod\(.*\)", line):
                # log.debug("YES is a doctest", path=rel(path))
                return True
    # log.debug("NO is NOT a doctest", path=rel(path))
    return False


def module_for(path):
    return ".".join(
        str(Path(path).resolve().relative_to(NANSI_ROOT))[:-3].split("/")
    )


def nansi_modules():
    return [
        (module_for(path), path)
        for path in glob(NANSI_ROOT / "nansi" / "**" / "*.py")
        if is_doctest(path)
    ]


def plugins():
    return [
        path
        for path in glob(REPO_ROOT / "roles" / "**" / "*_plugins" / "*.py")
        if is_doctest(path)
    ]


@LOG.inject
def env(*, debug: bool = False, log=LOG):
    e = {**os.environ, "DOCTESTING": "yup"}
    if debug:
        log.debug("Setting DOCTESTING_DEBUG...")
        e["DOCTESTING_DEBUG"] = "yup"
    else:
        log.debug("NOT debug!")
    return e


@LOG.inject
def test(name, cmd, *, log=LOG, debug: bool = False):
    log.debug("Running test command...", name=name, cmd=cmd)
    r = run(
        cmd,
        capture_output=True,
        encoding="utf8",
        env=env(debug=debug),
        check=False,
    )
    log.debug(
        "Test command completed",
        cmd=cmd,
        status=r.returncode,
        len_stdout=len(r.stdout),
        len_stderr=len(r.stderr),
    )
    if r.returncode == 0 and not r.stderr:
        C.print(":white_check_mark:", name)
        if r.stdout:
            C.print(Panel(Padding(r.stdout, 1), title=f"STDOUT {name}"))
        return True
    else:
        if r.stdout:
            C.print(Panel(Padding(r.stdout, 1), title=f"STDOUT {name}"))
        if r.stderr:
            C.print(Panel(Padding(r.stderr, 1), title=f"STDERR {name}"))
        C.print(":x:", name)
        return False


@LOG.inject
def test_module(module, *, verbose: bool = False, debug: bool = False, log=LOG):
    log.debug("Testing MODULE...", module=module, verbose=verbose)
    cmd = ["python", "-m", module]
    if verbose:
        cmd.append("-v")
    return test(module, cmd, debug=debug)


@LOG.inject
def test_file(path, *, verbose: bool = False, debug: bool = False, log=LOG):
    log.debug("Testing FILE (Ansible plugin)...", path=path, verbose=verbose)
    cmd = ["python", "-m", "doctest"]
    if verbose:
        cmd.append("-v")
    cmd.append(path)
    return test(rel(path), cmd, debug=debug)


def is_nansi_module(target):
    path = Path(target)
    if not path.exists():
        path = Path(target.replace(".", "/"))
        if path.is_dir():
            path = path / "__init__.py"
        else:
            path.suffix = ".py"
    try:
        Path(path).resolve().relative_to(NANSI_ROOT / "nansi")
    except ValueError:
        return False
    return True


@LOG.inject
def main(*, log=LOG):
    print(NANSI_ROOT)
    parser = ArgumentParser(description="Doctest driver script")
    parser.add_argument(
        "-d", "--debug", action="store_true", help="Switch on debug log output"
    )
    parser.add_argument(
        "-f",
        "--fail-fast",
        action="store_true",
        help="Quit after first failure",
    )
    parser.add_argument("-v", "--verbose", action="store_true", help="Speak up")
    parser.add_argument(
        "targets", nargs="*", help="Specific module names or file paths to run"
    )

    args = parser.parse_args()

    logging.setup(level=(logging.DEBUG if args.debug else logging.INFO))

    LOG.debug("Parsed args", args_=args)

    count = 0
    failures = []

    def failed(path):
        if args.fail_fast:
            log.error("Fail-fast", path=path)
            sys.exit(1)
        failures.append(path)

    if len(args.targets) == 0:

        log.info("Testing all modules and plugins...")

        for module, path in nansi_modules():
            rel_path = rel(path)
            if not test_module(module, verbose=args.verbose, debug=args.debug):
                failed(rel_path)
            count += 1
        for path in plugins():
            rel_path = rel(path)
            if not test_file(path, verbose=args.verbose, debug=args.debug):
                failed(path)
            count += 1
    else:
        targets = list(map(rel, args.targets))

        log.info("Specific target(s) given", targets=ol(targets))

        for target in targets:
            if Path(target).exists():
                if is_nansi_module(target):
                    if not test_module(
                        module_for(target),
                        verbose=args.verbose,
                        debug=args.debug,
                    ):
                        failed(rel(target))
                    count += 1
                else:
                    if not test_file(
                        target, verbose=args.verbose, debug=args.debug
                    ):
                        failed(rel(target))
                    count += 1
            else:
                if not test_module(
                    target, verbose=args.verbose, debug=args.debug
                ):
                    path = NANSI_ROOT.joinpath(*target.split("."))
                    if path.is_dir():
                        path = path / "__init__.py"
                    else:
                        path = path.with_suffix(".py")
                    failed(rel(path))

    if len(failures) == 0:
        log.info(f"All {count} file(s) PASSED")
    else:
        log.error(
            f"{len(failures)} file(s) failed (of {count} file(s) tested)",
            failures=failures,
        )
        sys.exit(1)


if __name__ == "__main__":
    main()
