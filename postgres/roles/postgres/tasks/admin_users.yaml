# In order to let the admin users of the machine log into postgres locally (over
# the local unix socket) *as* the `postgres` role, we're going to create a
# [User Name Map][1] that tells postgres they can be `postgres`.
# 
# This allows them to do:
# 
#     $ psql -U postgres
# 
# which (in my opinion) greatly simplifies dev and admin access situations.
# 
# **ORDER IS IMPORTANT HERE!!!**
# 
# [1]: https://www.postgresql.org/docs/current/auth-username-maps.html
# 

# First, make sure the `admin` map we're going to use allows the `postgres`
# os user to be `postgres` by editing `pg_ident.conf`
- name: >-
    Ensure the `admin` map allows `postgres` os user to log in as the
    `postgres` role (in {{ pg_indent_conf_path | f }})
  lineinfile:
    path: "{{ pg_indent_conf_path }}"
    line: "admin           postgres                postgres"

# Next, change (or add) the line that lets os `postgres` be db `postgres` over
# the local (unix socket) connection.
# 
# In (usual) `pg_hba.conf`, the line (with tons of spacing omitted):
# 
#     local all postgres peer
# 
# is changed to:
# 
#     local all postgres peer map=admin
# 
# This seems to point local db logins asking to be `postgres` to the `admin` 
# map in `pg_indent.conf`, which we just created in the last step.
# 
- name: >-
    Ensure line in {{ pg_hba_conf_path | f }} allowing `postgres` and admin
    users to log in locally as `postgres`
  lineinfile:
    path: "{{ pg_hba_conf_path }}"
    # ljust - cols are 4-space tabbed to various widths: 2, 4, 10, 2
    # (last col is our addition)
    line: >-
      {{
        (
          'local'.ljust(4 * 2),
          'all'.ljust(4 * 4),
          'postgres'.ljust(4 * 10),
          'peer'.ljust(4 * 2),
          'map=admin',
        ) | join('')
      }}
    regexp: '^local\s+all\s+postgres\s+'
    insertbefore: '^# TYPE\s+'

# Finally, fill out the `admin` with a row for each admin user allowing them
# to also log into the db as `postgres`.
# 
# For an os user `dude`, the line looks like (again, tons of spacing omitted):
# 
#     admin dude postgres
# 
# Also, notify postgres to restart when we see changes here (added or removed
# admin users).
# 
- loop: "{{ pg_local_admin_users }}"
  lineinfile:
    path: "{{ pg_indent_conf_path }}"
    line: >-
      {{
        (
          'admin'.ljust(4 * 4),
          item.name.ljust(4 * 6),
          'postgres',
        ) | join('')
      }}
  notify: pg_restart
  