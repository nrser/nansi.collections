# 1.) Dependencies
# ============================================================================

- name: Build `wgconf` package locally
  delegate_to: localhost
  # We usually inherit a `become: True`, causing Ansible to try to escalate to
  # `root` locally as well, which is not what we want. Need to explicitly tell
  # Ansible not to become.
  become: False
  shell:
    cmd: python setup.py bdist_wheel
    chdir: "{{ _wg_cfg_pkg_dir }}"
    creates: "{{ _wg_cfg_pkg_src }}"
  vars:
    ansible_user: "{{ lookup('env', 'USER') }}"

- name: Copy `wgconf` package to target
  copy:
    src: "{{ _wg_cfg_pkg_src }}"
    dest: "{{ _wg_cfg_pkg_dest }}"

- name: Install `wgconf` package
  pip:
    name: "file://{{ _wg_cfg_pkg_dest }}"
    state: "{{ _wg_cfg_pkg_state }}"
    executable: "{{ pip_3_8_5 }}"
  vars:
    ansible_python_interpreter: "{{ python_3_8_5 }}"
    

# 2.) Hooks
# ============================================================================

- name: Create hooks directory
  file:
    path: "{{ wg_cfg_hooks_dir }}"
    state: directory
    mode: '0700'

- with_items:
    - name: PreUp
      src:  "{{ wg_cfg_pre_up_src }}"
      dest: "{{ wg_cfg_pre_up_dest }}"
    - name: PostUp
      src:  "{{ wg_cfg_post_up_src }}"
      dest: "{{ wg_cfg_post_up_dest }}"
    - name: PreDown
      src: "{{ wg_cfg_pre_down_src }}"
      dest: "{{ wg_cfg_pre_down_dest }}"
    - name: PostDown
      src: "{{ wg_cfg_post_down_src }}"
      dest: "{{ wg_cfg_post_down_dest }}"
  loop_control:
    loop_var: _wg_cfg_hook
  include_tasks: _write_hook.yaml

# 3.) Config Files
# ============================================================================
  
- name: Configure Wireguard
  wg_cfg_update:
    hostname: "{{ wg_cfg_hostname }}"
    name: "{{ wg_cfg_name }}"
    dir: "{{ wg_cfg_dir }}"
    public_address: "{{ wg_cfg_public_address }}"
    interface: "{{ wg_cfg_interface }}"
    peers: "{{ wg_cfg_peers }}"
    clients: "{{ wg_cfg_clients }}"
    wg_bin_path: "{{ wg_bin_path }}"
    interface_defaults: >-
      {{ _wg_cfg_defaults.interface | combine(wg_cfg_interface_defaults) }}
    peer_defaults: >-
      {{ _wg_cfg_defaults.peer | combine(wg_cfg_peer_defaults) }}
    client_defaults: >-
      {{ _wg_cfg_defaults.client | combine(wg_cfg_client_defaults) }}
  vars:
    ansible_python_interpreter: "{{ python_3_8_5 }}"
  register: wg_cfg_update_rsp
  no_log: "{{ wg_cfg_no_log }}"
  notify: wg_cfg_restart

# 4.) Fetch Updated Client Configs
# ============================================================================

- when: >-
    (wg_cfg_local_client_config_dir is not none) and
    (wg_cfg_update_rsp.client_configs | length) > 0
  with_dict: "{{ wg_cfg_update_rsp.client_configs }}"
  loop_control:
    loop_var: _wg_cfg_cc
  vars:
    _wg_cfg_cc_name: "{{ _wg_cfg_cc.key }}"
    _wg_cfg_cc_src: "{{ _wg_cfg_cc.value }}"
    _wg_cfg_cc_dest: >-
      {{  { 'dir': wg_cfg_local_client_config_dir,
            'client_name': _wg_cfg_cc.key,
            'config_name': wg_cfg_name,
            'hostname': wg_cfg_hostname,
          } | nrser.nansi.wg_cfg_local_client_config_dest
      }}
    _wg_cfg_cc_owner: >-
      {{  wg_cfg_clients | dig(_wg_cfg_cc_name, 'owner') }}
  include_tasks: "{{ role_path }}/tasks/fetch_client_configs.yaml"
