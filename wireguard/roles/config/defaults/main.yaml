# Global Defaults
# ============================================================================

# Make sure we have a value for how often we update the apt cache, used when
# installing packages.
apt_cache_valid_time: 86400 # 1 day

# `wgconf` needs Python 3.8+
# 
# This default assumes installed with `pyenv`, and uses it for only the specific
# tasks that is requires. 'Cause Ubuntu seems to pretty much stick `pip` with 
# the 'system' Python 3, which is `3.6.9` (as of 2020-07-25), and Assible 
# modules just go and install Python packages, particularly the `apt` package,
# though `apt` itself (`python3-apt` or whatever)... causing hair-loss.
# 
python_3_8_5: "{{ pyenv_root }}/versions/3.8.5/bin/python"
pip_3_8_5: "{{ pyenv_root }}/versions/3.8.5/bin/pip"

# Path to `wg` executable
wg_bin_path: /usr/bin/wg

# Public Defaults
# ============================================================================

wg_cfg_tmp: /tmp

wg_cfg_hostname: "{{ inventory_hostname }}"
wg_cfg_name: wg0
wg_cfg_public_address: "{{ ansible_host }}"
wg_cfg_dir: /etc/wireguard

# Interface
# ----------------------------------------------------------------------------

# `[Interface]` properties, `dict` of prop names to values. Explicit `null` 
# (or '') means to delete (on update).
# 
wg_cfg_interface: {}

# User-defined defaults for the `[Interface]` section of the config.
# 
# Merged over the internal defaults at `_wg_cfg_defaults.interface` for use.
# 
# Explicitly provide `[key]: null` to un-set an internal default. Say if you
# wanted to let `SaveConfig` out of the `[Interface]` entirely then set:
# 
#     wg_cfg_interface_defaults:
#       save_config: null
# 
wg_cfg_interface_defaults: {}

### Hooks ###

# Where to save 'hook' scripts.
wg_cfg_hooks_dir: "{{ wg_cfg_dir }}/hooks"

# System networking interface that outbound Wireguard traffic is forwarded
# through, which is toggled to NAT masquerade (like a router) in the default
# hook scripts.
# 
# If you're providing custom hook scripts this won't get used.
# 
# It's called `eth0` on most Ubuntu VPS that you spin up.
# 
wg_cfg_sys_iface: eth0

# Paths to hook script to copy or template (if they end in `.j2`) to the 
# target host and specify in the interface config.
# 
# https://github.com/pirate/wireguard-docs#preup
# https://github.com/pirate/wireguard-docs#PostUp
# https://github.com/pirate/wireguard-docs#predown
# https://github.com/pirate/wireguard-docs#PostDown
# 
# Any that are not `null` will be copied or templated to their corresponding 
# destination path (see below), and as the _default_ `[Interface]` value 
# (in `wg_cfg_interface_defaults`) to be invoked with `wg_cfg_name` and
# `wg_cfg_sys_iface` as arguments (in that order).
# 
# For example, if
# 
#     wg_cfg_hooks_dir:     /etc/wireguard/hooks              # default
#     wg_cfg_post_up_src:   post_up.sh                        # default
#     wg_cfg_name:          wg0                               # default
#     wg_cfg_sys_iface:     eth0                              # default
#     wg_cfg_post_up_dest:  /etc/wireguard/hooks/post_up.sh   # computed
# 
# then `post_up.sh` will be copied to
# 
#     /etc/wireguard/hooks/post_up.sh
# 
# and have
# 
#     wg_cfg_interface_defaults:
#       post_up: /etc/wireguard/hooks/post_up.sh wg0 eth0
# 
# Unless `wg_cfg_interface.post_up` is **explicitly** set (including
# `wg_cfg_interface.post_up: null`), then the resulting config file will show
# 
#     [Interface]
#     PostUp: /etc/wireguard/hooks/post_up.sh wg0 eth0
# 
wg_cfg_pre_up_src: null
wg_cfg_post_up_src: post_up.sh
wg_cfg_pre_down_src: null
wg_cfg_post_down_src: post_down.sh

# Destination paths for the hook scripts.
# 
# If the source is `null`, the computed path will be as well, and no copying or
# `[Interface]` value defaulting will occur.
#
# If the source is not `null`, a destination path is formed from the source
# filename and `wg_cfg_hooks_dir`.
# 
wg_cfg_pre_up_dest: >-
  {{ wg_cfg_pre_up_src | nrser.nansi.wg_cfg_hook_dest(wg_cfg_hooks_dir) }}
wg_cfg_post_up_dest: >-
  {{ wg_cfg_post_up_src | nrser.nansi.wg_cfg_hook_dest(wg_cfg_hooks_dir) }}
wg_cfg_pre_down_dest: >-
  {{ wg_cfg_pre_down_src | nrser.nansi.wg_cfg_hook_dest(wg_cfg_hooks_dir) }}
wg_cfg_post_down_dest: >-
  {{ wg_cfg_post_down_src | nrser.nansi.wg_cfg_hook_dest(wg_cfg_hooks_dir) }}


# Peers
# ----------------------------------------------------------------------------

# `[Peer]` to create, `null` or `dict` mapping peer `name` to `dict` of prop
# name/value pairs. Explicit `null` (or '') means to delete (on update).
# 
# TODO Doc?
# 
wg_cfg_peers: null

# Defaults for `[Peer]` sections (that are not 'clients').
# 
# Merged over the internal defaults at `_wg_cfg_defaults.peer` for use.
# 
# Same as `wg_cfg_interface_defaults`, `[key]: null` un-sets an internal
# default.
# 
wg_cfg_peer_defaults: {}


# Clients
# ----------------------------------------------------------------------------

# Clients to create, `null` or `dict` mapping client `name` to `dict` of prop
# name/value pairs. Explicit `null` (or '') means to delete (on update).
# 
# TODO Doc?
# 
wg_cfg_clients: null

# Defaults for each 'client' config, some of which will apply to it's `[Peer]`
# section on the target config, and some to the generated config for the 
# client itself.
# 
# Merged over the internal defaults at `_wg_cfg_defaults.client` for use.
# 
# TODO Doc these somewhere? They in the Python at the moment.
# 
# Same as `wg_cfg_interface_defaults`, `[key]: null` un-sets an internal
# default.
# 
wg_cfg_client_defaults: {}


wg_cfg_client_config_dir: "{{ wg_cfg_dir }}/clients"
# wg_cfg_client_config_delegate_to: "{{ inventory_hostname }}"
# wg_cfg_client_config_delegate_to_user: "{{ ansible_user }}"
# wg_cfg_client_config_rm_old: true

wg_cfg_local_client_config_dir: null


# Private Defaults
# ============================================================================
# 
# Override at ur own risk.
# 

wg_cfg_no_log: true

# Internal defaults for config objects. User-defined ones are merged over to
# provide actual defaults.
_wg_cfg_defaults:
  interface:
    # Since we're controlling our config from Ansible, probably don't want `wg`
    # writing to it too. At least I found I didn't.
    save_config: false
    # 'Hook' values, which depend on the values of variables in the Hooks
    # section, detailed below.
    pre_up: >-
      {{ wg_cfg_pre_up_dest
          | nrser.nansi.wg_cfg_hook_value( wg_cfg_name, wg_cfg_sys_iface ) }}
    post_up: >-
      {{  wg_cfg_post_up_dest
          | nrser.nansi.wg_cfg_hook_value( wg_cfg_name, wg_cfg_sys_iface ) }}
    pre_down: >-
      {{  wg_cfg_pre_down_dest
          | nrser.nansi.wg_cfg_hook_value( wg_cfg_name, wg_cfg_sys_iface ) }}
    post_down: >-
      {{  wg_cfg_post_down_dest
          | nrser.nansi.wg_cfg_hook_value( wg_cfg_name, wg_cfg_sys_iface ) }}
  peer: {}
  client:
    # Why the hell not? Doesn't seem like it should impact perf much
    preshared_key: true
    # There doesn't seem to be much consensus on best free DNS service, but hey,
    # at least this ain't Google...
    dns:
      - 1.1.1.1
      - 1.0.0.1


# `wgconf` Python Package
# ----------------------------------------------------------------------------

_wg_cfg_pkg_name: wgconf
_wg_cfg_pkg_version: 0.0.2.dev0
_wg_cfg_pkg_filename: >-
  {{ _wg_cfg_pkg_name }}-{{ _wg_cfg_pkg_version }}-py3-none-any.whl
_wg_cfg_pkg_dir: >-
  {{ (local_repo_dir, 'packages', _wg_cfg_pkg_name) | nrser.nansi.to_path }}
_wg_cfg_pkg_src: >-
  {{ (_wg_cfg_pkg_dir, 'dist', _wg_cfg_pkg_filename) | nrser.nansi.to_path }}
_wg_cfg_pkg_dest: >-
  {{ wg_cfg_tmp }}/{{ _wg_cfg_pkg_filename }}

# DEV   Switch this to 'forcereinstall' after rebuilding the same version wheel
_wg_cfg_pkg_state: present
